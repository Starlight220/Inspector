plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.7.20'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20'
    id "com.diffplug.spotless" version "7.0.3"
}


final MAIN_CLASS = 'io.starlight.inspector.MainKt'
application.mainClass.set(MAIN_CLASS)
repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += "-Xcontext-receivers"
}

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    implementation 'com.github.Starlight220:ActionsKtLib:v2.2'

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()
}

boolean isCI() {
    return (project.hasProperty("CI"))
}

if (!isCI()) {
    task runLocal() {
        doFirst {
            println "Setting local path!"
            environment 'INSPECTOR_CONFIG', '.github/workflows/inspector.json'
        }

        dependsOn 'run'
    }
}

spotless {
    enforceCheck !isCI()

    kotlin {
        ktfmt('0.51').kotlinlangStyle()
        endWithNewline()
    }
}

task cleanup(type: Delete) {
    if (project.hasProperty("CI") && project.property("CI") == true) {
        return
    }
    delete 'outputs.inspect_rli.json'
    delete 'report.md'
    delete 'new.tmp'
    delete 'old.tmp'

    tasks.named('run').get() dependsOn 'cleanup'
}

tasks.jar {
    manifest.attributes["Main-Class"] = MAIN_CLASS
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = 'EXCLUDE'
}

if (!isCI()) {
    tasks.run {
        environment "INSPECTOR_CONFIG", ".github\\workflows\\inspector.json"
        environment "INPUT_ROOT", "C:\\Users\\yotam\\Documents\\dev\\frc-docs"
    }
}
